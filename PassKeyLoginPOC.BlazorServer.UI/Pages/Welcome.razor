@page "/welcome"
@inject IClient httpClient
@inject NavigationManager navManager

<h3>Welcome @DeviceId</h3>


<EditForm Model="GetModel" OnValidSubmit="GetUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="MachineName">Machine Name</label>
        <InputText class="form-control" @bind-Value="GetModel.MachineName" />
        <ValidationMessage For="@(() => GetModel.Name)" />
    </div>
    <br />
    <div class="form-group">
        <label for="name">Name</label>
        <InputText class="form-control" @bind-Value="GetModel.Name" />
        <ValidationMessage For="@(() => GetModel.Name)" />
    </div>
    <br />
    <div class="form-group">
        <label for="phoneNumber">PhoneNumber</label>
        <InputText class="form-control" @bind-Value="GetModel.PhoneNumber" />
        <ValidationMessage For="@(() => GetModel.PhoneNumber)" />
    </div>
    <button type="submit" class="btn btn-primary btn-block">Delete Account</button>


</EditForm>

@code {
    UserReadOnlyDto GetModel = new UserReadOnlyDto();


    string message = string.Empty;
    private int id;

    private async Task GetUser()
    {

        try
        {
            var userResponse = await httpClient.UsersGETAsync(GetModel.MachineName);
            if (userResponse.Id != null)
            {
                id = userResponse.Id;
            }
            await httpClient.UsersDELETEAsync(id);
            navManager.NavigateTo("/users/register");

        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                navManager.NavigateTo("/users/register");
            }
            message = ex.Message;
        }

    }

}



@code {
    private string DeviceId => System.Environment.MachineName;
}